name: Build & Test

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/**'
      - 'release/**'
      - 'hotfix/**'

env:
  configuration: Release
  artifacts-dir: artifacts
  nugets-dir:    artifacts/nupkgs
  pdb-dir:       artifacts/pdb
  finalSemVer:   ""

jobs:
  build:
    runs-on: windows-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      -
        name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      -
        name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '6.0.x'

      -
        name: Use GitVersion
        id:   gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v3.1.11

      - name: Set finalSemVer value
        run: echo "finalSemVer=${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}.${{ steps.gitversion.outputs.commitsSinceVersionSource }}" >> $GITHUB_ENV

      # Build
      -
        name: Build
        run:  >
          dotnet build
          -c ${{env.configuration}}
          -p:AssemblyVersion=${{ env.finalSemVer }}
          -p:FileVersion=${{ env.finalSemVer }}
          -p:InformationalVersion=${{ env.finalSemVer }}

      # Run tests
      -
        name: Test
        run: dotnet test --no-build

      # Create and place nuget packages into env.nugets-dir directory
      -
        name: Pack
        run: dotnet pack --no-build -o:${{ env.nugets-dir }} -p:PackageVersion=${{ env.finalSemVer }}

      -
        name: Store Version
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: version.json
          json: |
            {
            "assembly-version": "${{ env.finalSemVer }}",
            "assembly-file-version": "${{ env.finalSemVer }}",
            "nuget-version": "${{ env.finalSemVer }}"
            }
          dir:  ${{ env.artifacts-dir }}

      -
        name: Store PDB
        run: |
          robocopy .out\bin\netstandard2.0\ ${{ env.pdb-dir }} *.pdb
          if ($lastexitcode -lt 8) { $global:lastexitcode = 0 }

      -
        name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name:           Artifacts
          path:           ${{ env.artifacts-dir }}/
          retention-days: 3